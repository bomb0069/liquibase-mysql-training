databaseChangeLog:
  - changeSet:
      id: 001-add-customer-id-to-orders
      author: developer
      comment: Add customer_id column to existing orders table for royalty program integration
      changes:
        - sql:
            sql: |
              ALTER TABLE orders 
              ADD COLUMN customer_id BIGINT NULL AFTER user_id,
              ADD INDEX idx_customer_id (customer_id),
              ADD CONSTRAINT fk_orders_customer_id 
                FOREIGN KEY (customer_id) REFERENCES customers(id);
      rollback:
        - sql:
            sql: |
              ALTER TABLE orders 
              DROP FOREIGN KEY fk_orders_customer_id,
              DROP INDEX idx_customer_id,
              DROP COLUMN customer_id;

  - changeSet:
      id: 002-create-royalty-points-table
      author: developer
      comment: Create royalty points table to track customer loyalty points
      changes:
        - sql:
            sql: |
              CREATE TABLE royalty_points (
                id BIGINT AUTO_INCREMENT PRIMARY KEY,
                customer_id BIGINT NOT NULL,
                order_id BIGINT NULL,
                points_earned INT DEFAULT 0,
                points_redeemed INT DEFAULT 0,
                transaction_type ENUM('EARNED', 'REDEEMED', 'EXPIRED', 'ADJUSTMENT') NOT NULL,
                description VARCHAR(255) NULL,
                transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                expiry_date DATE NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                INDEX idx_customer_id (customer_id),
                INDEX idx_order_id (order_id),
                INDEX idx_transaction_type (transaction_type),
                INDEX idx_transaction_date (transaction_date),
                INDEX idx_expiry_date (expiry_date),
                FOREIGN KEY (customer_id) REFERENCES customers(id),
                FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL
              );
      rollback:
        - sql:
            sql: DROP TABLE IF EXISTS royalty_points;

  - changeSet:
      id: 003-create-customer-royalty-summary-table
      author: developer
      comment: Create customer royalty summary table for quick point balance lookups
      changes:
        - sql:
            sql: |
              CREATE TABLE customer_royalty_summary (
                customer_id BIGINT PRIMARY KEY,
                total_points_earned INT DEFAULT 0,
                total_points_redeemed INT DEFAULT 0,
                current_balance INT DEFAULT 0,
                points_expiring_30_days INT DEFAULT 0,
                tier_level VARCHAR(20) DEFAULT 'BRONZE',
                tier_qualified_date DATE NULL,
                last_transaction_date TIMESTAMP NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                INDEX idx_tier_level (tier_level),
                INDEX idx_current_balance (current_balance),
                INDEX idx_last_transaction_date (last_transaction_date),
                FOREIGN KEY (customer_id) REFERENCES customers(id) ON DELETE CASCADE
              );
      rollback:
        - sql:
            sql: DROP TABLE IF EXISTS customer_royalty_summary;

  - changeSet:
      id: 004-create-royalty-program-rules-table
      author: developer
      comment: Create royalty program rules table to define point earning rules
      changes:
        - sql:
            sql: |
              CREATE TABLE royalty_program_rules (
                id BIGINT AUTO_INCREMENT PRIMARY KEY,
                rule_name VARCHAR(100) NOT NULL,
                rule_type ENUM('PURCHASE', 'SIGNUP', 'BIRTHDAY', 'REFERRAL', 'BONUS') NOT NULL,
                points_per_dollar DECIMAL(5,2) DEFAULT 0.00,
                fixed_points INT DEFAULT 0,
                minimum_purchase_amount DECIMAL(10,2) DEFAULT 0.00,
                maximum_points_per_transaction INT NULL,
                tier_level VARCHAR(20) NULL,
                active BOOLEAN DEFAULT TRUE,
                start_date DATE NOT NULL,
                end_date DATE NULL,
                description TEXT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                INDEX idx_rule_type (rule_type),
                INDEX idx_active (active),
                INDEX idx_tier_level (tier_level),
                INDEX idx_start_end_date (start_date, end_date)
              );
      rollback:
        - sql:
            sql: DROP TABLE IF EXISTS royalty_program_rules;

  - changeSet:
      id: 005-insert-default-royalty-rules
      author: developer
      comment: Insert default royalty program rules
      changes:
        - sql:
            sql: |
              INSERT INTO royalty_program_rules 
              (rule_name, rule_type, points_per_dollar, fixed_points, minimum_purchase_amount, tier_level, start_date, description)
              VALUES 
              ('Bronze Purchase Points', 'PURCHASE', 1.00, 0, 0.00, 'BRONZE', '2025-01-01', 'Earn 1 point per dollar spent for Bronze tier customers'),
              ('Silver Purchase Points', 'PURCHASE', 1.50, 0, 0.00, 'SILVER', '2025-01-01', 'Earn 1.5 points per dollar spent for Silver tier customers'),
              ('Gold Purchase Points', 'PURCHASE', 2.00, 0, 0.00, 'GOLD', '2025-01-01', 'Earn 2 points per dollar spent for Gold tier customers'),
              ('Welcome Bonus', 'SIGNUP', 0.00, 100, 0.00, NULL, '2025-01-01', 'One-time welcome bonus for new customers'),
              ('Birthday Bonus', 'BIRTHDAY', 0.00, 250, 0.00, NULL, '2025-01-01', 'Annual birthday bonus points');
      rollback:
        - sql:
            sql: DELETE FROM royalty_program_rules WHERE rule_name IN ('Bronze Purchase Points', 'Silver Purchase Points', 'Gold Purchase Points', 'Welcome Bonus', 'Birthday Bonus');

  - changeSet:
      id: 006-migrate-existing-orders-data
      author: developer
      comment: Link existing orders to customers and add sample customer links
      changes:
        - sql:
            sql: |
              -- Link existing orders to customers based on user_id
              -- Assuming user_id 1 maps to customer_id 1, etc.
              UPDATE orders SET customer_id = user_id WHERE user_id IN (1);

              -- Insert some additional sample orders for testing (only use existing user_id=1)
              INSERT INTO orders (user_id, customer_id, shipping_method_id, payment_method_id, sub_total_price, total_price, status)
              VALUES 
              (1, 1, 1, 1, 150.75, 150.75, 'completed'),
              (1, 1, 1, 1, 89.50, 89.50, 'completed'),
              (1, 2, 2, 1, 245.00, 245.00, 'completed'),
              (1, 3, 1, 2, 67.25, 67.25, 'paid');
      rollback:
        - sql:
            sql: |
              DELETE FROM orders WHERE total_price IN (150.75, 89.50, 245.00, 67.25);
              UPDATE orders SET customer_id = NULL;

  - changeSet:
      id: 007-insert-sample-royalty-transactions
      author: developer
      comment: Insert sample royalty point transactions based on existing orders
      changes:
        - sql:
            sql: |
              INSERT INTO royalty_points (customer_id, order_id, points_earned, points_redeemed, transaction_type, description, transaction_date, expiry_date)
              SELECT 
                o.customer_id,
                o.id,
                FLOOR(o.total_price) as points_earned,
                0 as points_redeemed,
                'EARNED' as transaction_type,
                CONCAT('Points earned from order #', o.id) as description,
                o.created as transaction_date,
                DATE_ADD(DATE(o.created), INTERVAL 1 YEAR) as expiry_date
              FROM orders o 
              WHERE o.customer_id IS NOT NULL 
                AND o.status IN ('completed', 'paid')
                AND o.total_price > 0;

              -- Add some manual transactions
              INSERT INTO royalty_points (customer_id, order_id, points_earned, points_redeemed, transaction_type, description, transaction_date, expiry_date)
              VALUES 
              (1, NULL, 0, 50, 'REDEEMED', 'Points redeemed for discount', '2025-08-24 10:00:00', NULL),
              (1, NULL, 100, 0, 'EARNED', 'Welcome bonus', '2025-07-01 00:00:00', '2026-07-01');
      rollback:
        - sql:
            sql: DELETE FROM royalty_points WHERE description LIKE '%order #%' OR description IN ('Points redeemed for discount', 'Welcome bonus');

  - changeSet:
      id: 008-create-royalty-triggers
      author: developer
      comment: Create triggers to automatically update royalty summary (skipped for compatibility)
      changes:
        - sql:
            sql: |
              -- Trigger creation skipped due to Liquibase compatibility issues
              -- This can be created manually if needed:
              -- CREATE TRIGGER tr_royalty_points_after_insert AFTER INSERT ON royalty_points FOR EACH ROW ...
              SELECT 'Trigger creation skipped' AS message;
      rollback:
        - sql:
            sql: DROP TRIGGER IF EXISTS tr_royalty_points_after_insert;
